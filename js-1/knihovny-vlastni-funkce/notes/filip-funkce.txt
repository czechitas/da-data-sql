
Pokud stále dumáte nad tím úkolem s hesly, zkusím to ještě vysvětlit na té analogii s okénkem, kde si objednáte jídlo a pak vám z okénka vypadne smažený sýr s tatarkou.

Funkci vytváříme ve chvíli, kdy máme nějaký kus kódu, který si chceme dát stranou pro pozdější použití. Stranou jej dáme tak, že jej zabalíme do funkce. Této funkci dáme jméno tím, že si ji uložíme do proměnné. Skrze tuto proměnnou můžeme pozdějí náš kus kódu (funkci) takzvaně zavolat. Zavoláním naší funkce se provede kód, který jsme do ní uzavřeli. 

Zavolání se dělá tak, že za název proměnné, kde mám funkci uloženou, napíšeme kulaté závorky. A do nich případně můžu napsat parametry, pokud je funkce chce. Při tom volání funkce už se vůbec nestarám o to, co je napsané uvnitř funkce – jenom jí dám na vstupu parametry a případně očekávám nějaký výstup.
Ve fyzickém světě je to podobné. Někdo si všimne, že si lidé často dělají hamburgery, a že se jejich výroba pořád opakuje. Tak postaví kuchyni a prodejní okénko, najme personál a začne dělat hamburgery. Tahle výrobna hamburgerů je vlastně taková funkce. A aby ji mohli ostatní používat, pojmenuje se, tj. uloží se do pojmenované proměnné, třeba McDonald. Já jako zákazník pak mám tu funkci McDonald (stojím u okénka) a zavolám ji – v reálném světě řeknu „dal bych si“, v JavaScriptu stačí jen kulaté závorky ().  Pak té funkci musím dát vstupní parametry – co bych si dal. V McDonaldu to řeknu při té objednávce („trojitý cheeseburger“), v JavaScriptu to dám do závorek (McDonald("trojitý cheeseburger")). Tím se ta funkce spustí a začne něco dělat – asi se začne něco dít v kuchyni. Co se děje uvnitř mne ale nemusí zajímat, já jenom čekám na výsledek. V JavaScriptu se tomu výsledku říká návratová hodnota a je to ten výsledek, který z funkce vypadne – v McDonaldu je to hotový cheeseburger. Malá odbočka do kuchyně – když tam mají cheeseburger hotový a chtějí ho předat (v JavaScriptu se říká vrátit) zákazníkovi, udělá se to v JavaScriptu klíčovým slovem return. Takže v McDonaldu je to v kuchyni „objednávka 123 je hotová“ a dají hotový cheeseburger na příslušný tác, který vám obsluha přinese; v JavaScriptu je to jen return "hotový cheeseburger".
A teď konečně k těm funkcím vyšších řádů a cvičení s hesly. Ona ta výroba cheeseburgeru chvíli trvá a mně se nechce na to čekat. A co teprve když si v hospodě objednám guláš se šesti, to si počkám ještě dýl. To takhle kdyby existovala nějaká služba, která by mi zásilku doručila domů – mohlo by se jí říkat třeba kurýr. Takže teď už mám dvě služby (funkce) – službu vyrábějící jídlo (McDonald) a službu, která umí (nejen) jídlo někam dovézt (třeba Dáme jídlo nebo nějaký kurýr). Jenomže teď ještě potřebuju, aby se ta služba vyrábějící jídlo uměla domluvit s tím kurýrem. Zatím totiž vydává jídlo jenom tomu, kdo si ho objednal. McDonald ale bude vstřícný a nabídne mi jinou službu/funkci – „OK, když nám dáte objednávku a k ní také kurýra, který ji doručí, pošleme vám hotové jídlo po tom kurýrovi“. Takže teď mám novou funkci McDonaldDelivery, která bere dva vstupy/parametry – objednávku a kurýra. V tom reálném světě bych tedy u toho okénka řekl svou objednávku a pak řekl „a až to bude hotové, pošlete to tady po tom kurýrovi“. A mohl bych si jít po svých, na dokončení té objednávky už by čekal kurýr, ne já.
V JavaScriptu by to tedy vypadalo takhle nějak:
const dameJidlo = (balicekSJidlem) = {
  //tady bude popsáno, jak funguje Dáme jídlo. Ale já tu službu chci jenom použít, nemusím vědět, jak funguje – stačí mi, že vím, že na vstupu dostane balíček s jídlem
}
const messenger = (balicek) = {
  //nevím ani jak uvnitř funguje Messenger. Ale umí převzít balíček a někam ho dopravit, takže pro dopravu cheeseburgeru půjde použít také
}
const mcDonaldDelivery = (objednavka, kuryr) = {
  //Tady bude nějaká kuchyně McDonalda. Nevím, jak funguje, ale vím, že na konci bude mít hotové jídlo.
  kuryr(hotoveJidlo); //vezmou hotové jídlo a pošlou ho kurýrem
}
//mám hlad, dal bych si něco k jídlu
mcDonaldDelivery("cheeseburger", dameJidlo)
Všimněte si několika věcí:
Můžu mít několik různých služeb/funkcí, které dělají to samé, každá ale trochu jinak. Tady mám třeba Dáme jídlo a Messenger. McDonaldu je ve skutečnosti úplně jedno, co ta služba dělá – důležité je pro něj jenom to, že jako parametr při volání dostane balíček. Když McDonaldu u toho okénka jako druhý parametr předám popeláře, McDonaldu to bude úplně jedno. Popelář také umí převzít balíček a něco s ním udělat, takže McDonald mu klidně balíček předá – a popelář ho vyhodí do popelnice.
V příkladu mám dvě služby/funkce – výrobu jídla a kurýra (ve skutečnosti mám dokonce dva různé kurýry). Jenom jedna funkce ale musí vědět o té druhé, opačně to neplatí. McDonaldDelivery musí vědět, že jako parametr dostane kurýra a musí vědět, co kurýrovi předat. Kurýr ale neví vůbec nic o McDonaldDelivery – prostě dostane balíček a doručí ho.
Zároveň ale McDonaldDelivery vůbec nezajímá, jakého kurýra jsem si vybral. Když jim tam před okýnko toho kurýra postavím, oni si na něj nalepí nálepku kuryr a je to pro ně pak celou dobu kuryr. Když ho pak potřebují zavolat (tj. aktivovat, aby provedl akci, kterou provést má – doručit balíček), zavolají jen kuryr(hotoveJidlo) („kurýre, doruč balíček“) a kurýr jídlo doručí (spustí se, provede se). (Tady už ta analogie trochu selhává – funkce neví nic o tom, že si jí někdo pojmenoval zrovna kuryr.)
Když si objednávám, kurýra nespouštím, nevolám – jenom ho předám McDonaldu. Tj. v tom posledním řádku nejsou kulaté závorky za dameJidlo. Kdybych kurýra při předání spustil, poběží hned ke mně domů a místo balíčku bude mít prázdno. A až by v McDonaldu měli cheeseburger hotový, zjistí, že ho nemají komu dát, protože je kurýry pryč. Předám jim tedy jen čekajícího kurýra (bez kulatých závorek) a McDonald si ho sám aktivuje (spustí, zavolá) těmi kulatými závorkami.
Všimněte si také, že v té mé analogii jsem zapomněl na to, že by kurýr asi měl vědět, kam má jídlo doručit. Ale i to je řešitelné – kurýr kromě balíčku bude mít na vstupu druhý parametr – adresu, kam má balíček doručit. A McDonaldDelivery řekne „na vstupu bereme jenom takové kurýry, kteří si od nás vezmou balíček a adresu“). A já pak dám McDonaldDelivery na vstupu tři parametry – objednávku, kurýra a adresu. Oni pak při spuštění kurýra předají dva parametry – jeden, který sami vyrobili (hotové jídlo), a druhý, který dostali ode mne a vlastně je vůbec nezajímal, mají ho jen proto, aby ho předali kurýrovi (adresu).
(Později se dozvíte i to, že se dá vyrobit kurýr, který už si tu adresu sám pamatuje. Ale to bude až v nějaké další lekci.)
No a podobné je to i s těmi hesly (nezapomněl jsem na ně :wink:). Funkce createAccount  z nějakého důvodu nechce dostat už hotové heslo. Chce dostat funkci, která na vstupu dostane počet znaků a podle toho teprve správné heslo vyrobí. Třeba může ta funkce createAccount fungovat tak, že když je uživatelské jméno kratší než 6 znaků, vygeneruje 12znakové heslo. A když bude uživatelské jméno delší, bude jí stačit 8znakové heslo. Tohle už nebude fungovat tak, že funkci předáte hotové heslo (leda byste jí předaly dvě hesla, kratší a delší, a ona by si pak vybrala jedno z nich; to by ale nebylo moc hezké). Takže jí předáte jen funkci, která umí generovat hesla zadané délky, a o zavolání té funkce už se postará funkce createAccount. Stejně jako když McDonaldDelivery předáváte kurýra, který má doručit balíček.
Mimochodem, stejně jako nechci v McDonaldu čekat, až bude hotové jídlo, nechci ani u webové stránky čekat, až uživatel klikne myší na tlačítko nebo stiskne klávesu. Proto tam místo toho dám kurýra nebo jinou funkci a vím, že je zavolají/spustí, až bude ten správný okamžik – až bude jídlo hotové nebo až uživatel klikne na tlačítko.